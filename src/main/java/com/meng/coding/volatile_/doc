系统底层如何实现数据一致性
  1.MESI如果能解决，就用MESI
  2.如果不能，就用锁总线

系统底层如何保证有序性
  1.内存屏障 sfence写屏障  mfence全屏障 lfence屏障 等系统原语
  2.锁总线

volatile如何解决指令重排序
  1.volatile i
  2.ACC_VOLATILE  字节码修饰
  3.JVM的内存屏障  虚拟机看到ACC_VOLATILE时会做响应处理，不同虚拟机处理方式不同
     屏障两边的指令不允许重排，保障有序
  4.hotspot实现 c++  见图hotspot_volatile.png
    hotspor未使用内存屏障主要因为内存屏障系统原语可移植性差




 内存屏障（Memory Barrier，或有时叫做内存栅栏，Memory Fence）是一种CPU指令，用于控制特定条件下的重排序和内存可见性问题。Java编译器也会根据内存屏障的规则禁止重排序。
      内存屏障可以被分为以下几种类型
LoadLoad屏障：对于这样的语句Load1; LoadLoad; Load2，在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。
StoreStore屏障：对于这样的语句Store1; StoreStore; Store2，在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。
LoadStore屏障：对于这样的语句Load1; LoadStore; Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。
StoreLoad屏障：对于这样的语句Store1; StoreLoad; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见